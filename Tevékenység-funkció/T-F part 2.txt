Az Angularban való megvalósítás hasonló logikát követ, de itt az **Angular formok** és a **two-way data binding** segítségével kezelhetjük az adatokat és a felhasználói interakciókat. Az Angularban különösen jól működik a **Reactive Forms** és a **Template-driven Forms** is, de az alábbi példában a **Reactive Forms**-ot fogom használni, mivel az jobban alkalmazható dinamikus adatkezelésnél.

### 1. **A szükséges Angular modulok**

Először is, szükség van az alábbi Angular modulok importálására a modulban (`app.module.ts`):

```typescript
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule } from '@angular/forms';  // Ezt kell importálni a formok kezeléséhez

import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, ReactiveFormsModule],  // ReactiveFormsModule kell ide
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
```

### 2. **Form Group és Form Control létrehozása**

Most következik a forma létrehozása és a mezők összekapcsolása a **Reactive Forms** segítségével.

#### **ActivityFormComponent (Component)**

1. **A formák létrehozása és adatkezelés:**

```typescript
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';

@Component({
  selector: 'app-activity-form',
  templateUrl: './activity-form.component.html',
  styleUrls: ['./activity-form.component.css'],
})
export class ActivityFormComponent implements OnInit {
  activityForm: FormGroup;

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    // A form group létrehozása
    this.activityForm = this.fb.group({
      activityName: ['', Validators.required],
      description: ['', Validators.required],
      isRegular: [false],
      frequency: ['', Validators.required],
      selectedDays: this.fb.array([]), // A napok tömbje (checkboxok)
      timePoints: this.fb.array(['06:00']), // Kezdeti időpont: 06:00
      interval: [''], // Kéthetente/havonta intervallum
    });
  }

  // A napok kiválasztásához
  get selectedDays(): FormArray {
    return this.activityForm.get('selectedDays') as FormArray;
  }

  // Időpontok hozzáadása
  get timePoints(): FormArray {
    return this.activityForm.get('timePoints') as FormArray;
  }

  // Napok hozzáadása
  onDayChange(day: string, event: any): void {
    if (event.target.checked) {
      this.selectedDays.push(this.fb.control(day));
    } else {
      const index = this.selectedDays.controls.findIndex(
        (control) => control.value === day
      );
      if (index >= 0) {
        this.selectedDays.removeAt(index);
      }
    }
  }

  // Időpont hozzáadása
  addTimePoint(time: string): void {
    this.timePoints.push(this.fb.control(time));
  }

  // Form elküldése
  onSubmit(): void {
    if (this.activityForm.valid) {
      console.log(this.activityForm.value);
    }
  }
}
```

### 3. **HTML template - A form megjelenítése**

Most pedig létrehozzuk a formot az **activity-form.component.html** fájlban, ahol a felhasználó kitöltheti a formot.

```html
<form [formGroup]="activityForm" (ngSubmit)="onSubmit()">
  <div>
    <label for="activityName">Tevékenység neve:</label>
    <input
      id="activityName"
      formControlName="activityName"
      type="text"
      placeholder="Adja meg a tevékenység nevét"
    />
  </div>

  <div>
    <label for="description">Részletes leírás:</label>
    <textarea
      id="description"
      formControlName="description"
      placeholder="Adja meg a tevékenység leírását"
    ></textarea>
  </div>

  <div>
    <label for="isRegular">Rendszeres tevékenység?</label>
    <input id="isRegular" formControlName="isRegular" type="checkbox" />
  </div>

  <div>
    <label for="frequency">Gyakoriság:</label>
    <select formControlName="frequency">
      <option value="">Válasszon gyakoriságot</option>
      <option value="daily">Naponta</option>
      <option value="weekly">Heti</option>
      <option value="biweekly">Kéthetente</option>
      <option value="monthly">Havonta</option>
      <option value="specific">Specifikus napok</option>
    </select>
  </div>

  <!-- Heti napok választása -->
  <div *ngIf="activityForm.get('frequency')?.value === 'weekly'">
    <label>Napok:</label>
    <div>
      <label *ngFor="let day of ['Hétfő', 'Kedd', 'Szerda', 'Csütörtök', 'Péntek', 'Szombat', 'Vasárnap']">
        <input
          type="checkbox"
          [value]="day"
          (change)="onDayChange(day, $event)"
          [checked]="selectedDays.controls.includes(day)"
        />
        {{ day }}
      </label>
    </div>
  </div>

  <!-- Időpontok -->
  <div>
    <label>Időpontok:</label>
    <div *ngFor="let time of timePoints.controls; let i = index">
      <input
        type="text"
        [formControlName]="i"
        placeholder="Adja meg az időpontot"
      />
    </div>
    <button type="button" (click)="addTimePoint('07:00')">07:00 hozzáadása</button>
    <button type="button" (click)="addTimePoint('14:00')">14:00 hozzáadása</button>
  </div>

  <!-- Kéthetente/havonta intervallum -->
  <div *ngIf="activityForm.get('frequency')?.value === 'biweekly' || activityForm.get('frequency')?.value === 'monthly'">
    <label for="interval">Intervallum (pl. 2 hét, 1 hónap):</label>
    <input
      id="interval"
      formControlName="interval"
      type="number"
      placeholder="Intervallum"
    />
  </div>

  <button type="submit" [disabled]="!activityForm.valid">Mentés</button>
</form>
```

### 4. **CSS stílusok**

Ez egy alap formához készült CSS, hogy a form vizuálisan is megfelelően jelenjen meg.

```css
form {
  display: flex;
  flex-direction: column;
  max-width: 600px;
  margin: 20px auto;
}

input,
textarea,
select {
  margin-bottom: 10px;
  padding: 8px;
  font-size: 16px;
}

button {
  padding: 10px;
  background-color: #4caf50;
  color: white;
  border: none;
  font-size: 16px;
  cursor: pointer;
}

button:disabled {
  background-color: #ddd;
}

label {
  font-weight: bold;
}
```

### 5. **Összegzés**

* Az **Angular Reactive Forms** használata segít abban, hogy dinamikusan kezeljük a mezők változását és validáljuk az adatokat.
* A formon található **checkboxok** és **input mezők** segítségével a felhasználó kiválaszthatja a napokat, az időpontokat, és megadhatja a szükséges adatokat.
* A form **submit** gombja akkor lesz aktív, ha minden szükséges mezőt kitöltöttek.

Ez a megoldás lehetőséget ad arra, hogy rugalmasan kezeljük a napokat és időpontokat, és hogy a form megfelelően reagáljon a felhasználói inputokra.
