Rendben, j√∂jj√∂n a **MapStruct mapper** a friss√≠tett adatmodellhez, amely t√°mogatja a t√∂bb `(nap, id≈ëpont)` p√°ros kezel√©s√©t.

---

## ‚úÖ **1. NapIdopontDTO √©s TevekenysegIdopont mappel√©se**

El≈ësz√∂r k√©sz√≠ts√ºnk seg√©df√ºggv√©nyeket a `NapIdopontDTO` ‚Üî `TevekenysegIdopont` konverzi√≥hoz.

---

## ‚úÖ `TevekenysegMapper.java`

```java
package hu.projekt.bolt.mapper;

import hu.projekt.bolt.dto.NapIdopontDTO;
import hu.projekt.bolt.dto.TevekenysegDTO;
import hu.projekt.bolt.dto.TevekenysegNaploDTO;
import hu.projekt.bolt.model.Tevekenyseg;
import hu.projekt.bolt.model.TevekenysegGyakorisag;
import hu.projekt.bolt.model.TevekenysegIdopont;
import hu.projekt.bolt.model.TevekenysegNaplo;
import org.mapstruct.*;

import java.util.List;
import java.util.stream.Collectors;

@Mapper(componentModel = "spring")
public interface TevekenysegMapper {

    TevekenysegNaploDTO TevekenysegNaploToDTO(TevekenysegNaplo tevekenysegNaplo);

    @Mapping(source = "tevekenyseg.megnevezes", target = "megnevezes")
    @Mapping(source = "tevekenyseg.leiras", target = "leiras")
    @Mapping(source = "tevekenysegGyakorisag.gyakorisag", target = "gyakorisag")
    @Mapping(source = "tevekenysegGyakorisag.kezdoDatum", target = "kezdoDatum")
    @Mapping(source = "tevekenysegGyakorisag.idopontok", target = "idopontok")
    TevekenysegDTO toTevekenysegDTO(Tevekenyseg tevekenyseg, TevekenysegGyakorisag tevekenysegGyakorisag);

    @IterableMapping(qualifiedByName = "idopontToDto")
    List<NapIdopontDTO> mapIdopontokToDTOs(List<TevekenysegIdopont> idopontok);

    @Named("idopontToDto")
    default NapIdopontDTO idopontToDto(TevekenysegIdopont idopont) {
        if (idopont == null) return null;
        return new NapIdopontDTO(idopont.getNap(), idopont.getIdopont());
    }

    // Ha k√©s≈ëbb DTO-b√≥l vissza akarsz mappelni entit√°sba:
    @Named("dtoToIdopont")
    default TevekenysegIdopont dtoToIdopont(NapIdopontDTO dto) {
        TevekenysegIdopont idopont = new TevekenysegIdopont();
        idopont.setNap(dto.getNap());
        idopont.setIdopont(dto.getIdopont());
        return idopont;
    }

    @IterableMapping(qualifiedByName = "dtoToIdopont")
    List<TevekenysegIdopont> mapDTOsToIdopontok(List<NapIdopontDTO> dtos);
}
```

---

## ‚úÖ Mi v√°ltozott?

| Elem                    | V√°ltoz√°s                                   |
| ----------------------- | ------------------------------------------ |
| `TevekenysegDTO`        | Tartalmaz `List<NapIdopontDTO>` mez≈ët      |
| `TevekenysegGyakorisag` | Tartalmaz `List<TevekenysegIdopont>`       |
| `TevekenysegMapper`     | M≈±k√∂dik a list√°s mappel√©s mindk√©t ir√°nyban |

---

## üìå K√∂vetkez≈ë l√©p√©s

Most m√°r a mapper k√©pes t√∂bb `(nap, id≈ëpont)` p√°r kezel√©s√©re.

A k√∂vetkez≈ë l√©p√©s lehet a **service r√©teg m√≥dos√≠t√°sa**, ahol a DTO alapj√°n:

* elmentj√ºk az √∫j `TevekenysegIdopont` entit√°sokat
* friss√≠t√©sn√©l t√∂r√∂lj√ºk a r√©gieket √©s √∫jrat√∂ltj√ºk

Sz√≥lj, ha j√∂het az is!
