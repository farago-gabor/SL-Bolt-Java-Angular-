A front-end felületen történő felvitelhez fontos, hogy a felhasználók számára intuitív módon jelenjenek meg a tevékenységek és az azokhoz kapcsolódó időpontok. A felületnek lehetőséget kell biztosítania arra, hogy a felhasználók **válasszanak tevékenységet**, **állítsák be a gyakoriságot**, **rendeljenek hozzá napokat és időpontokat**, valamint esetlegesen meghatározzák az **intervallumot** (ha például kéthetente vagy havonta van szükség a végrehajtásra).

### 1. **Tevékenység létrehozása / szerkesztése**

Ez a rész biztosítja, hogy a felhasználó megadhassa az alapadatokat és a tevékenységhez tartozó részleteket.

#### Mezők:

* **Tevékenység neve** (pl. "Árufeltöltés", "Káva főző zacctartály tisztítása")

  * **Input típus**: Szöveges mező
  * **Tipikus tartalom**: 100 karakter
* **Részletes leírás** (pl. leírás a tevékenységről)

  * **Input típus**: Szöveges nagy mező (textarea)
  * **Tipikus tartalom**: 300-500 karakter
* **Rendszeres tevékenység?** (Checkbox vagy toggle, hogy a tevékenység ismétlődik-e)

  * **Input típus**: Checkbox (Igen/Nem)
  * **Tipikus tartalom**: Boolean érték (Igaz/Hamis)

---

### 2. **Gyakoriság kiválasztása**

Ez a rész a tevékenység gyakoriságának beállítására szolgál. Itt lehet választani, hogy naponta, hetente, kéthetente, havonta, vagy egyedi napokon (specifikus) szeretnénk a tevékenységet végrehajtani.

#### Mezők:

* **Gyakoriság típusa**

  * **Input típus**: Dropdown (legördülő lista)
  * **Lehetőségek**:

    * Naponta
    * Heti
    * Kéthetente
    * Havonta
    * Specifikus napok
  * **Tipikus tartalom**: Lista, ami különböző gyakoriságokat tartalmaz.

#### Eseti beállítások:

* **Ha "Heti" gyakoriságot választottál**:

  * **Napok kiválasztása**: Több napot is kiválaszthatsz (Checkboxok vagy multiselect lista).

    * **Input típus**: Több választós lista (Checkboxok vagy multiselect dropdown)
    * **Lehetőségek**: Hétfő, Kedd, Szerda, Csütörtök, Péntek, Szombat, Vasárnap

* **Ha "Kéthetente" vagy "Havonta" gyakoriságot választottál**:

  * **Intervallum** (pl. 2 hét vagy 1 hónap)

    * **Input típus**: Szöveges mező (szám)
    * **Tipikus tartalom**: 2 (hetente), 1 (havonta)

* **Ha "Specifikus napok" gyakoriságot választottál**:

  * **Specifikus napok**:

    * **Input típus**: Naptár kiválasztás (dátum kiválasztása)
    * **Tipikus tartalom**: Egyedi dátumok (pl. 2025-09-12)

---

### 3. **Időpontok beállítása**

Itt állíthatjuk be, hogy a tevékenység hány különböző időpontban történik egy napon.

#### Mezők:

* **Időpontok beállítása**:

  * **Input típus**: Több időpontot hozzáadó mező (időpont kiválasztás)
  * **Tipikus tartalom**: 06:00, 07:00, 14:00 (időpontok listája)
  * A felhasználó egyszerűen hozzáadhat új időpontokat vagy eltávolíthatja a meglévőket.

---

### 4. **Tevékenység napjainak és időpontjainak összerendelése**

Egy interaktív felületen biztosítani kell, hogy a felhasználó könnyen hozzárendelhesse a kiválasztott időpontokat a kívánt napokhoz.

#### Mezők:

* **Napok és időpontok összerendelése** (interaktív grid)

  * **Input típus**: Dinamikusan bővíthető grid vagy táblázat.

    * Minden naphoz tartozhat egy vagy több időpont, amelyet a felhasználó kiválaszthat (vagy új időpontot adhat hozzá).
  * **Tipikus tartalom**:
    \| Hétfő | 06:00, 07:00, 14:00 |
    \| Kedd  | 06:00, 07:00 |
    \| Szerda | 14:00 |

    * Ez a grid alapvetően tartalmazza az összes napot, amelyhez hozzárendelhetők az időpontok.

---

### 5. **Mentés és módosítás**

Miután a felhasználó minden mezőt kitöltött, lehetőséget biztosítunk arra, hogy mentse a tevékenységet és az időpontokat.

#### Mezők:

* **Mentés**:

  * **Input típus**: Gomb (mentés)
* **Módosítások**: Ha egy már meglévő tevékenységet szeretne módosítani, akkor a megfelelő mezőket előre kitöltve jeleníthetjük meg.

---

### Front-end felület (React példával)

Ez egy egyszerű React alapú felület lehet, ahol a felhasználó egy űrlapon keresztül adhatja meg az adatokat. Az űrlap kitöltése után az adatokat JSON formátumban küldhetjük a backend-nek.

```jsx
import React, { useState } from 'react';

const ActivityForm = () => {
  const [activityName, setActivityName] = useState('');
  const [description, setDescription] = useState('');
  const [isRegular, setIsRegular] = useState(false);
  const [frequency, setFrequency] = useState('');
  const [selectedDays, setSelectedDays] = useState([]);
  const [timePoints, setTimePoints] = useState(['06:00']);
  const [interval, setInterval] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    const formData = {
      activityName,
      description,
      isRegular,
      frequency,
      selectedDays,
      timePoints,
      interval,
    };
    console.log('Form submitted:', formData);
  };

  const handleAddTimePoint = (time) => {
    setTimePoints([...timePoints, time]);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>Tevékenység neve:</label>
        <input
          type="text"
          value={activityName}
          onChange={(e) => setActivityName(e.target.value)}
        />
      </div>

      <div>
        <label>Részletes leírás:</label>
        <textarea
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        ></textarea>
      </div>

      <div>
        <label>Rendszeres tevékenység?</label>
        <input
          type="checkbox"
          checked={isRegular}
          onChange={(e) => setIsRegular(e.target.checked)}
        />
      </div>

      <div>
        <label>Gyakoriság:</label>
        <select value={frequency} onChange={(e) => setFrequency(e.target.value)}>
          <option value="">Válassz gyakoriságot</option>
          <option value="daily">Naponta</option>
          <option value="weekly">Heti</option>
          <option value="biweekly">Kéthetente</option>
          <option value="monthly">Havonta</option>
          <option value="specific">Specifikus napok</option>
        </select>
      </div>

      <div>
        {frequency === 'weekly' && (
          <div>
            <label>Napok:</label>
            <select
              multiple
              value={selectedDays}
              onChange={(e) => setSelectedDays([...e.target.selectedOptions].map(o => o.value))}
            >
              <option value="Monday">Hétfő</option>
              <option value="Tuesday">Kedd</option>
              <option value="Wednesday">Szerda</option>
              <option value="Thursday">Csütörtök</option>
              <option value="Friday">Péntek</option>
              <option value="Saturday">Szombat</option>
              <option
```


value="Sunday">Vasárnap</option> </select> </div>
)} </div>

```
  <div>
    <label>Időpontok:</label>
    <button type="button" onClick={() => handleAddTimePoint('07:00')}>07:00 hozzáadása</button>
    <button type="button" onClick={() => handleAddTimePoint('14:00')}>14:00 hozzáadása</button>
    <div>{timePoints.join(', ')}</div>
  </div>

  <div>
    <button type="submit">Mentés</button>
  </div>
</form>
```

);
};

export default ActivityForm;

```

Ez az alapja a felületnek. További finomhangolásokkal bővíthető a napok és időpontok dinamikus hozzáadása, választható gyakoriságok, naptár és így tovább.
```
